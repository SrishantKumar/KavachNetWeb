rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isWorkspaceMember(workspaceId) {
      let workspace = get(/databases/$(database)/documents/workspaces/$(workspaceId));
      return workspace != null && workspace.data.members.hasAny([{'userId': request.auth.uid}]);
    }

    function getUserRole(workspaceId) {
      let workspace = get(/databases/$(database)/documents/workspaces/$(workspaceId));
      let members = workspace.data.members;
      let userMember = members.filter(m => m.userId == request.auth.uid)[0];
      return userMember.role;
    }

    function isCoordinator(workspaceId) {
      return getUserRole(workspaceId) == 'coordinator';
    }

    function isAnalyzer(workspaceId) {
      return getUserRole(workspaceId) == 'analyzer';
    }

    function isDecryptor(workspaceId) {
      return getUserRole(workspaceId) == 'decryptor';
    }

    // Workspace rules
    match /workspaces/{workspaceId} {
      allow read: if isAuthenticated() && isWorkspaceMember(workspaceId);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isCoordinator(workspaceId);
      allow delete: if isAuthenticated() && isCoordinator(workspaceId);

      // Workspace invitations
      match /invitations/{invitationId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isCoordinator(workspaceId);
        allow delete: if isAuthenticated() && (
          isCoordinator(workspaceId) || 
          resource.data.inviteeEmail == request.auth.token.email
        );
      }

      // Messages within workspace
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isWorkspaceMember(workspaceId);
        allow create: if isAuthenticated() && isWorkspaceMember(workspaceId);
        allow update: if isAuthenticated() && (
          isCoordinator(workspaceId) ||
          (isDecryptor(workspaceId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['decrypted'])) ||
          (isAnalyzer(workspaceId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['analysis', 'threatLevel']))
        );
        allow delete: if isAuthenticated() && isCoordinator(workspaceId);
      }

      // Encryption keys
      match /keys/{keyId} {
        allow read: if isAuthenticated() && (isCoordinator(workspaceId) || isDecryptor(workspaceId));
        allow create: if isAuthenticated() && (isCoordinator(workspaceId) || isDecryptor(workspaceId));
        allow delete: if isAuthenticated() && isCoordinator(workspaceId);
      }

      // Analytics
      match /analytics/{analyticsId} {
        allow read: if isAuthenticated() && (isCoordinator(workspaceId) || isAnalyzer(workspaceId));
        allow write: if isAuthenticated() && isAnalyzer(workspaceId);
      }
    }
  }
}
